package kape_System;

import java.awt.EventQueue;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.Font;

public class reciepts_return_page extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JProgressBar progressBar;
    private JList<String> receiptList;
    private DefaultListModel<String> receiptListModel;

    public reciepts_return_page(String[] receiptContent, String total, String paymentMethod) {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(250, 30, 652, 387);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        receiptListModel = new DefaultListModel<>();
        for (String line : receiptContent) {
            receiptListModel.addElement(line);
        }
        receiptListModel.addElement("Total: " + total);
        receiptListModel.addElement("Payment Method: " + paymentMethod);

        receiptList = new JList<>(receiptListModel);
        receiptList.setFont(new Font("Tahoma", Font.PLAIN, 12));

        JScrollPane scrollPane = new JScrollPane(receiptList);
        scrollPane.setBounds(119, 48, 414, 200);
        contentPane.add(scrollPane);

        progressBar = new JProgressBar();
        progressBar.setBounds(119, 258, 414, 25);
        progressBar.setStringPainted(true);
        contentPane.add(progressBar);

        JButton btnCancelOrder = new JButton("Cancel Order");
        btnCancelOrder.addActionListener(e -> {
            int option = JOptionPane.showConfirmDialog(contentPane, "Are you sure you want to cancel the order?", "Confirm Cancellation", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(contentPane, "Canceling order...");
                menu_page menuPage = new menu_page();
                menuPage.setVisible(true);
                dispose();
            }
        });
        btnCancelOrder.setBounds(334, 293, 150, 25);
        btnCancelOrder.setFocusable(false);
        contentPane.add(btnCancelOrder);

        JButton btnDone = new JButton("Done");
        btnDone.setBounds(163, 293, 150, 25);
        btnDone.setFocusable(false);
        btnDone.addActionListener(e -> {
            new Thread(new Runnable() {
                public void run() {
                    int i = 0;
                    try {
                        while (i <= 100) {
                            progressBar.setValue(i);
                            progressBar.setString("Loading " + i + "%");
                            Thread.sleep(50);
                            i += 1;
                        }
                        if (i > 100) {
                            dispose();
                            EventQueue.invokeLater(new Runnable() {
                                public void run() {
                                    try {
                                        login_page login = new login_page();
                                        login.setVisible(true);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            });
                        }
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }).start();

            JOptionPane.showMessageDialog(contentPane, "Order is complete. Returning to Home.");
            home_page homePage = new home_page();
            homePage.setVisible(true);
            dispose();
        });
        contentPane.add(btnDone);

        // Start the progress bar update in a separate thread
        new Thread(new Runnable() {
            public void run() {
                int i = 0;
                try {
                    while (i <= 100) {
                        progressBar.setValue(i);
                        progressBar.setString("Delivery on process...");
                        Thread.sleep(50);
                        i += 1;
                    }
                    if (i > 100) {
                        dispose();
                        EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                try {
                                    menu_page menuPage = new menu_page();
                                    menuPage.setVisible(true);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                        });
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }).start();
    }

    public static void recieptDisplay(String[] receiptContent, String total, String paymentMethod) {
        EventQueue.invokeLater(() -> {
            try {
                reciepts_return_page frame = new reciepts_return_page(receiptContent, total, paymentMethod);
                frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }
}

