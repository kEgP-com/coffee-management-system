package kape_system_admin;

import java.awt.EventQueue;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class product_add_page extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JTable table;
	private JButton btnNewButton;
	private JButton btnRemoveItem;
	private JButton btnRestore;
	private JTextField txtName;
	private JTextField txtPrice;
	private JTextField txtSize;
	private DefaultTableModel model;
	private List<Object[]> removedRows = new ArrayList<>();
	private JLabel lblNumberOfProducts;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					product_add_page frame = new product_add_page();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public product_add_page() {
		getContentPane().setLayout(null);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1043, 770);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(contentPane);
		contentPane.setLayout(null);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(186, 53, 480, 598);
		contentPane.add(scrollPane);

		model = new DefaultTableModel(new Object[]{"No.", "Type", "Name", "Price", "Size"}, 0);
		table = new JTable(model);
		scrollPane.setViewportView(table);

		btnNewButton = new JButton("ADD ITEM");
		btnNewButton.setBounds(688, 339, 135, 41);
		contentPane.add(btnNewButton);

		btnRemoveItem = new JButton("REMOVE ITEM");
		btnRemoveItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int selectedRow = table.getSelectedRow();
				if (selectedRow != -1) {
					Object[] removedRowData = new Object[table.getColumnCount()];
					for (int i = 0; i < table.getColumnCount(); i++) {
						removedRowData[i] = table.getValueAt(selectedRow, i);
					}
					removedRows.add(removedRowData);
					model.removeRow(selectedRow);
					lblNumberOfProducts.setText("Number of Products: " + model.getRowCount());
				}
			}
		});
		btnRemoveItem.setBounds(688, 447, 135, 41);
		contentPane.add(btnRemoveItem);

		btnRestore = new JButton("RESTORE");
		btnRestore.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (!removedRows.isEmpty()) {
					Object[] lastRemovedRow = removedRows.remove(removedRows.size() - 1);
					model.addRow(lastRemovedRow);
					lblNumberOfProducts.setText("Number of Products: " + model.getRowCount());
				}
			}
		});
		btnRestore.setBounds(688, 600, 135, 41);
		contentPane.add(btnRestore);

		JLabel lblNewLabel = new JLabel("Type:");
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNewLabel.setBounds(688, 122, 46, 41);
		contentPane.add(lblNewLabel);

		JLabel lblPrice = new JLabel("Price:");
		lblPrice.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblPrice.setBounds(688, 232, 46, 41);
		contentPane.add(lblPrice);

		JLabel lblName = new JLabel("Name:");
		lblName.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblName.setBounds(688, 181, 46, 41);
		contentPane.add(lblName);

		JLabel lblSize = new JLabel("Size:");
		lblSize.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblSize.setBounds(688, 283, 46, 41);
		contentPane.add(lblSize);

		JComboBox<String> comboBox = new JComboBox<>();
		comboBox.setFont(new Font("Tahoma", Font.PLAIN, 15));
		comboBox.setModel(new DefaultComboBoxModel<>(new String[]{"Hot", "Cold"}));
		comboBox.setBounds(756, 127, 69, 31);
		contentPane.add(comboBox);

		JButton btnRestoreAll = new JButton("RESTORE ALL");
		btnRestoreAll.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				for (Object[] removedRow : removedRows) {
					model.addRow(removedRow);
				}
				removedRows.clear();
				lblNumberOfProducts.setText("Number of Products: " + model.getRowCount());
			}
		});
		btnRestoreAll.setBounds(688, 549, 135, 41);
		contentPane.add(btnRestoreAll);

		lblNumberOfProducts = new JLabel("Number of Products: ");
		lblNumberOfProducts.setFont(new Font("Tahoma", Font.PLAIN, 15));
		lblNumberOfProducts.setBounds(186, 661, 190, 41);
		contentPane.add(lblNumberOfProducts);

		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(0, 0, 1319, 22);
		contentPane.add(menuBar);

		txtName = new JTextField();
		txtName.setBounds(756, 194, 96, 19);
		contentPane.add(txtName);
		txtName.setColumns(10);

		txtPrice = new JTextField();
		txtPrice.setColumns(10);
		txtPrice.setBounds(756, 245, 96, 19);
		contentPane.add(txtPrice);

		txtSize = new JTextField();
		txtSize.setColumns(10);
		txtSize.setBounds(756, 296, 96, 19);
		contentPane.add(txtSize);

		JButton btnRemoveAll = new JButton("REMOVE ALL");
		btnRemoveAll.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int rowCount = model.getRowCount();
				for (int i = rowCount - 1; i >= 0; i--) {
					Object[] rowData = new Object[table.getColumnCount()];
					for (int j = 0; j < table.getColumnCount(); j++) {
						rowData[j] = table.getValueAt(i, j);
					}
					removedRows.add(rowData);
					model.removeRow(i);
				}
				lblNumberOfProducts.setText("Number of Products: " + model.getRowCount());
			}
		});
		btnRemoveAll.setBounds(688, 498, 135, 41);
		contentPane.add(btnRemoveAll);

		JButton btnUpdate = new JButton("UPDATE");
		btnUpdate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int selectedRow = table.getSelectedRow();
				if (selectedRow != -1) {
					model.setValueAt(comboBox.getSelectedItem().toString(), selectedRow, 1);
					model.setValueAt(txtName.getText(), selectedRow, 2);
					model.setValueAt(txtPrice.getText(), selectedRow, 3);
					model.setValueAt(txtSize.getText(), selectedRow, 4);
				}
			}
		});
		btnUpdate.setBounds(688, 391, 135, 41);
		contentPane.add(btnUpdate);

		JLabel lblBackground = new JLabel();
		lblBackground.setBounds(-713, -35, 1958, 822);
		lblBackground.setIcon(new ImageIcon("C:\\Users\\kinpr\\Desktop\\Kape de cabuyao\\kape_System\\src\\kape_system_admin\\product_background.png"));
		contentPane.add(lblBackground);

		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				int rowCount = model.getRowCount();
				Object[] rowData = {
					rowCount + 1,
					comboBox.getSelectedItem().toString(),
					txtName.getText(),
					txtPrice.getText(),
					txtSize.getText()
				};
				model.addRow(rowData);
				lblNumberOfProducts.setText("Number of Products: " + model.getRowCount());
			}
		});
	}
}

