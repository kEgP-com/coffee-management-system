package kape_system_admin;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JScrollPane;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;

public class user_admin_page extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
    private JTextField textFieldEmail;
    private JTextField textFieldUsername;
    private JTextField textFieldPassword;
    private JTable table;
    public DefaultTableModel tableModel;
    public JLabel lblNumberOfUsers;
    public List<String[]> userList;
    public List<String[]> removedUsers;
    public int nextId;
    private int selectedRowIndex = -1;
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					user_admin_page frame = new user_admin_page();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public user_admin_page() {
        userList = new ArrayList<>();
        removedUsers = new ArrayList<>();
        nextId = 1;

        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        setBounds(100, 100, 1042, 783);
        
        JMenuBar menuBar = new JMenuBar();
        setJMenuBar(menuBar);
        
        JMenu mmMenu = new JMenu("Menu");
        menuBar.add(mmMenu);
        
        JMenuItem mntmAccount = new JMenuItem("Account");
        mmMenu.add(mntmAccount);
        
        JMenuItem mntmSettings = new JMenuItem("Settings");
        mmMenu.add(mntmSettings);
        
        JMenuItem mntmLogout = new JMenuItem("Logout");
        mmMenu.add(mntmLogout);
        
        JMenu mnPage = new JMenu("Page");
        menuBar.add(mnPage);
        
        JMenuItem mntmHome = new JMenuItem("Home");
        mnPage.add(mntmHome);
        
        JMenuItem mntmUser = new JMenuItem("User");
        mnPage.add(mntmUser);
        
        JMenuItem mntmPayment = new JMenuItem("Payment");
        mnPage.add(mntmPayment);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        JScrollPane scrollPane = new JScrollPane();
        scrollPane.setBounds(183, 44, 480, 598);

        tableModel = new DefaultTableModel(new Object[]{"ID", "Username", "Email", "Password"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; 
            }
        };
        table = new JTable(tableModel);
        scrollPane.setViewportView(table);

        JLabel lblEmail = new JLabel("Email");
        lblEmail.setFont(new Font("Tahoma", Font.PLAIN, 15));
        lblEmail.setBounds(685, 172, 46, 41);

        textFieldEmail = new JTextField();
        textFieldEmail.setHorizontalAlignment(SwingConstants.LEFT);
        textFieldEmail.setFont(new Font("Tahoma", Font.PLAIN, 12));
        textFieldEmail.setBounds(765, 178, 121, 31);

        JLabel lblUsername = new JLabel("Username");
        lblUsername.setFont(new Font("Tahoma", Font.PLAIN, 15));
        lblUsername.setBounds(685, 120, 80, 41);

        textFieldUsername = new JTextField();
        textFieldUsername.setHorizontalAlignment(SwingConstants.LEFT);
        textFieldUsername.setFont(new Font("Tahoma", Font.PLAIN, 12));
        textFieldUsername.setBounds(765, 127, 121, 31);

        JLabel lblPassword = new JLabel("Password");
        lblPassword.setFont(new Font("Tahoma", Font.PLAIN, 15));
        lblPassword.setBounds(685, 224, 80, 41);

        textFieldPassword = new JTextField();
        textFieldPassword.setHorizontalAlignment(SwingConstants.LEFT);
        textFieldPassword.setFont(new Font("Tahoma", Font.PLAIN, 12));
        textFieldPassword.setBounds(765, 231, 121, 31);

        JButton btnAdd = new JButton("ADD");
        btnAdd.setBounds(685, 365, 135, 41);

        JButton btnRemoveItem = new JButton("REMOVE");
        btnRemoveItem.setBounds(685, 416, 135, 41);

        JButton btnRemoveAll = new JButton("REMOVE ALL");
        btnRemoveAll.setBounds(685, 467, 135, 41);

        JButton btnRestoreAll = new JButton("RESTORE ALL");
        btnRestoreAll.setBounds(685, 518, 135, 41);

        JButton btnRestore = new JButton("RESTORE");
        btnRestore.setBounds(685, 569, 135, 41);

        JButton btnUpdate = new JButton("UPDATE");
        btnUpdate.setBounds(685, 318, 135, 41); 

        lblNumberOfUsers = new JLabel("Number of Users: 0");
        lblNumberOfUsers.setFont(new Font("Tahoma", Font.PLAIN, 15));
        lblNumberOfUsers.setBounds(183, 652, 190, 41);

        contentPane.add(scrollPane);
        contentPane.add(lblEmail);
        contentPane.add(lblUsername);
        contentPane.add(lblPassword);
        contentPane.add(textFieldEmail);
        contentPane.add(textFieldUsername);
        contentPane.add(textFieldPassword);
        contentPane.add(btnAdd);
        contentPane.add(btnRemoveItem);
        contentPane.add(btnRemoveAll);
        contentPane.add(btnRestoreAll);
        contentPane.add(btnRestore);
        contentPane.add(btnUpdate);
        contentPane.add(lblNumberOfUsers);

        btnAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String username = textFieldUsername.getText();
                String email = textFieldEmail.getText();
                String password = textFieldPassword.getText();
                if (!username.isEmpty() && !email.isEmpty() && !password.isEmpty()) {
                    String[] user = new String[]{String.valueOf(nextId), username, email, password};
                    userList.add(user);
                    tableModel.addRow(user);
                    lblNumberOfUsers.setText("Number of Users: " + userList.size());
                    textFieldUsername.setText("");
                    textFieldEmail.setText("");
                    textFieldPassword.setText("");
                    nextId++;
                }
            }
        });

        btnRemoveItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) {
                    removedUsers.add(userList.get(selectedRow));
                    userList.remove(selectedRow);
                    tableModel.removeRow(selectedRow);
                    lblNumberOfUsers.setText("Number of Users: " + userList.size());
                }
            }
        });

        btnRemoveAll.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                removedUsers.addAll(userList);
                userList.clear();
                tableModel.setRowCount(0);
                lblNumberOfUsers.setText("Number of Users: 0");
            }
        });

        btnRestoreAll.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                for (String[] user : removedUsers) {
                    userList.add(user);
                    tableModel.addRow(user);
                }
                removedUsers.clear();
                lblNumberOfUsers.setText("Number of Users: " + userList.size());
            }
        });

        btnRestore.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (!removedUsers.isEmpty()) {
                    String[] user = removedUsers.remove(removedUsers.size() - 1);
                    userList.add(user);
                    tableModel.addRow(user);
                    lblNumberOfUsers.setText("Number of Users: " + userList.size());
                }
            }
        });

        btnUpdate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (selectedRowIndex != -1) {
                    String username = textFieldUsername.getText();
                    String email = textFieldEmail.getText();
                    String password = textFieldPassword.getText();
                    if (!username.isEmpty() && !email.isEmpty() && !password.isEmpty()) {
                        userList.get(selectedRowIndex)[1] = username;
                        userList.get(selectedRowIndex)[2] = email;
                        userList.get(selectedRowIndex)[3] = password;
                        tableModel.setValueAt(username, selectedRowIndex, 1);
                        tableModel.setValueAt(email, selectedRowIndex, 2);
                        tableModel.setValueAt(password, selectedRowIndex, 3);
                        textFieldUsername.setText("");
                        textFieldEmail.setText("");
                        textFieldPassword.setText("");
                        selectedRowIndex = -1;
                    }
                }
            }
        });

        table.getSelectionModel().addListSelectionListener(event -> {
            if (!event.getValueIsAdjusting() && table.getSelectedRow() != -1) {
                selectedRowIndex = table.getSelectedRow();
            }
        });
    }
}
