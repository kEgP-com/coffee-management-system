package kape_system;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;

public class ProductPage extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JComboBox<String> comboBoxProducts;
    private JComboBox<String> comboBoxSize;
    private DefaultListModel<String> cartModel;
    private List<Product> products;
    private JTextField textFieldQuantity;

    /**
     * Launch the application.
     */
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    ProductPage frame = new ProductPage();
                    frame.setVisible(true);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    /**
     * Create the frame.
     */
    public ProductPage() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 800, 600);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        JLabel lblSelectProduct = new JLabel("Select Product:");
        lblSelectProduct.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblSelectProduct.setBounds(50, 50, 100, 25);
        contentPane.add(lblSelectProduct);

        JLabel lblSelectSize = new JLabel("Select Size:");
        lblSelectSize.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblSelectSize.setBounds(50, 100, 100, 25);
        contentPane.add(lblSelectSize);

        comboBoxProducts = new JComboBox<>();
        comboBoxProducts.setFont(new Font("Tahoma", Font.PLAIN, 14));
        comboBoxProducts.setBounds(200, 50, 200, 25);
        contentPane.add(comboBoxProducts);

        comboBoxSize = new JComboBox<>();
        comboBoxSize.setFont(new Font("Tahoma", Font.PLAIN, 14));
        comboBoxSize.setModel(new DefaultComboBoxModel<>(new String[]{"Small", "Medium", "Large"}));
        comboBoxSize.setBounds(200, 100, 200, 25);
        contentPane.add(comboBoxSize);

        JLabel lblQuantity = new JLabel("Quantity:");
        lblQuantity.setFont(new Font("Tahoma", Font.PLAIN, 14));
        lblQuantity.setBounds(50, 150, 100, 25);
        contentPane.add(lblQuantity);

        textFieldQuantity = new JTextField();
        textFieldQuantity.setFont(new Font("Tahoma", Font.PLAIN, 14));
        textFieldQuantity.setBounds(200, 150, 200, 25);
        contentPane.add(textFieldQuantity);

        JButton btnAddToCart = new JButton("Add to Cart");
        btnAddToCart.setFont(new Font("Tahoma", Font.PLAIN, 14));
        btnAddToCart.setBounds(50, 200, 150, 25);
        btnAddToCart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addToCart();
            }
        });
        contentPane.add(btnAddToCart);

        cartModel = new DefaultListModel<>();
        JList<String> listCart = new JList<>(cartModel);
        JScrollPane scrollPaneCart = new JScrollPane(listCart);
        scrollPaneCart.setBounds(50, 250, 350, 200);
        contentPane.add(scrollPaneCart);

        JButton btnProceedToCart = new JButton("Proceed to Cart");
        btnProceedToCart.setFont(new Font("Tahoma", Font.PLAIN, 14));
        btnProceedToCart.setBounds(50, 470, 150, 25);
        btnProceedToCart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                CartPage cartPage = new CartPage();
                cartPage.setVisible(true);
                dispose();
            }
        });
        contentPane.add(btnProceedToCart);

        initProducts();
        populateProductComboBox();
    }

    private void initProducts() {
        products = new ArrayList<>();
        products.add(new Product("Espresso", "Hot", 50, 70, 90));
        products.add(new Product("Latte", "Hot", 60, 80, 100));
        products.add(new Product("Iced Coffee", "Cold", 70, 90, 110));
        // Add more products as needed
    }

    private void populateProductComboBox() {
        for (Product product : products) {
            comboBoxProducts.addItem(product.getName() + " (" + product.getType() + ")");
        }
    }

    private void addToCart() {
        String selectedProduct = (String) comboBoxProducts.getSelectedItem();
        String selectedSize = (String) comboBoxSize.getSelectedItem();
        int quantity = Integer.parseInt(textFieldQuantity.getText());

        for (Product product : products) {
            if (selectedProduct.equals(product.getName() + " (" + product.getType() + ")")) {
                int price = 0;
                switch (selectedSize) {
                    case "Small":
                        price = product.getPriceSmall();
                        break;
                    case "Medium":
                        price = product.getPriceMedium();
                        break;
                    case "Large":
                        price = product.getPriceLarge();
                        break;
                }
                int totalPrice = price * quantity;
                cartModel.addElement(selectedProduct + " - " + selectedSize + " - " + quantity + " pcs - Php " + totalPrice);
                break;
            }
        }
    }
}

class Product {
    private String name;
    private String type;
    private int priceSmall;
    private int priceMedium;
    private int priceLarge;

    public Product(String name, String type, int priceSmall, int priceMedium, int priceLarge) {
        this.name = name;
        this.type = type;
        this.priceSmall = priceSmall;
        this.priceMedium = priceMedium;
        this.priceLarge = priceLarge;
    }

    public String getName() {
        return name;
    }

    public String getType() {
        return type;
    }

    public int getPriceSmall() {
        return priceSmall;
    }

    public int getPriceMedium() {
        return priceMedium;
    }

    public int getPriceLarge() {
        return priceLarge;
    }
}
