package kape_System;

import java.awt.EventQueue;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.Font;
import java.util.List;

public class reciepts_return_page extends JFrame {

    private static final long serialVersionUID = 1L;
    private JPanel contentPane;
    private JProgressBar progressBar;
    private JList<String> receiptList;
    private DefaultListModel<String> receiptListModel;

    public reciepts_return_page(String[] receiptContent, String total, String paymentMethod) {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(250, 30, 652, 387);
        contentPane = new JPanel();
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        setContentPane(contentPane);
        contentPane.setLayout(null);

        // Create receipt details list model and add receipt content
        receiptListModel = new DefaultListModel<>();
        for (String line : receiptContent) {
            receiptListModel.addElement(line);
        }
        receiptListModel.addElement("Total: " + total);
        receiptListModel.addElement("Payment Method: " + paymentMethod);

        // Create receipt list and set its model
        receiptList = new JList<>(receiptListModel);
        receiptList.setFont(new Font("Tahoma", Font.PLAIN, 12));

        // Create scroll pane and add receipt list to it
        JScrollPane scrollPane = new JScrollPane(receiptList);
        scrollPane.setBounds(119, 48, 414, 200);
        contentPane.add(scrollPane);

        progressBar = new JProgressBar();
        progressBar.setBounds(119, 258, 414, 25);
        progressBar.setStringPainted(true);
        contentPane.add(progressBar);

        JButton btnCancelOrder = new JButton("Cancel Order");
        btnCancelOrder.addActionListener(e -> {
            int option = JOptionPane.showConfirmDialog(contentPane, "Are you sure you want to cancel the order?", "Confirm Cancellation", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                JOptionPane.showMessageDialog(contentPane, "Canceling order...");
                dispose(); // Close the receipt page
            }
        });
        btnCancelOrder.setBounds(334, 293, 150, 25);
        btnCancelOrder.setFocusable(false);
        contentPane.add(btnCancelOrder);

        JButton btnDone = new JButton("Done");
        btnDone.setBounds(163, 293, 150, 25);
        btnDone.setFocusable(false);
        btnDone.addActionListener(e -> {
            progressBar.setValue(100); // Simulate order completion
            JOptionPane.showMessageDialog(contentPane, "Order is complete. Returning to Home.");
            home_page homePage = new home_page();
            homePage.setVisible(true);
            dispose(); // Close the receipt page
        });
        contentPane.add(btnDone);

        // Start the progress bar update
        updateProgressBar();
    }

    public void updateProgressBar() {
        SwingWorker<Void, Integer> worker = new SwingWorker<Void, Integer>() {
            @Override
            protected Void doInBackground() throws Exception {
                int i = 0;
                while (i <= 100) {
                    publish(i);
                    Thread.sleep(2000); 
                    i += 1;
                }
                return null;
            }

            @Override
            protected void process(List<Integer> chunks) {
                int value = chunks.get(chunks.size() - 1);
                progressBar.setValue(value);
                progressBar.setString("Delivery on process... ");
            }

            @Override
            protected void done() {
                dispose();
                EventQueue.invokeLater(new Runnable() {
                    public void run() {
                        try {
                            login_page login = new login_page();
                            login.setVisible(true);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                });
            }
        };
        worker.execute();
    }

    public static void displayRecieptsReturnPage(String[] receiptContent, String total, String paymentMethod) {
        EventQueue.invokeLater(() -> {
            try {
                reciepts_return_page frame = new reciepts_return_page(receiptContent, total, paymentMethod);
                frame.setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }

    public static void main(String[] args) {
        String[] receiptContent = {"Americano - Medium - P49 x 2", "Latte - Large - P59 x 1"};
        String total = "P157";
        String paymentMethod = "GCASH";
        displayRecieptsReturnPage(receiptContent, total, paymentMethod);
    }
}
